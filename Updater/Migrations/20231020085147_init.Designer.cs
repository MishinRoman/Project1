// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Updater.Data;

#nullable disable

namespace Updater.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231020085147_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Use")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project1.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Updater.Models.Currency", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CharCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nominal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rate")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            ID = "R01010",
                            CharCode = "AUD",
                            Name = "Австралийский доллар",
                            Nominal = "1",
                            NumCode = "036",
                            Value = "61,3329"
                        },
                        new
                        {
                            ID = "R01020A",
                            CharCode = "AZN",
                            Name = "Азербайджанский манат",
                            Nominal = "1",
                            NumCode = "944",
                            Value = "57,2396"
                        },
                        new
                        {
                            ID = "R01035",
                            CharCode = "GBP",
                            Name = "Фунт стерлингов Соединенного королевства",
                            Nominal = "1",
                            NumCode = "826",
                            Value = "118,1896"
                        },
                        new
                        {
                            ID = "R01060",
                            CharCode = "AMD",
                            Name = "Армянских драмов",
                            Nominal = "100",
                            NumCode = "051",
                            Value = "24,2167"
                        },
                        new
                        {
                            ID = "R01090B",
                            CharCode = "BYN",
                            Name = "Белорусский рубль",
                            Nominal = "1",
                            NumCode = "933",
                            Value = "29,5776"
                        },
                        new
                        {
                            ID = "R01100",
                            CharCode = "BGN",
                            Name = "Болгарский лев",
                            Nominal = "1",
                            NumCode = "975",
                            Value = "52,5645"
                        },
                        new
                        {
                            ID = "R01115",
                            CharCode = "BRL",
                            Name = "Бразильский реал",
                            Nominal = "1",
                            NumCode = "986",
                            Value = "19,2440"
                        },
                        new
                        {
                            ID = "R01135",
                            CharCode = "HUF",
                            Name = "Венгерских форинтов",
                            Nominal = "100",
                            NumCode = "348",
                            Value = "26,6362"
                        },
                        new
                        {
                            ID = "R01150",
                            CharCode = "VND",
                            Name = "Вьетнамских донгов",
                            Nominal = "10000",
                            NumCode = "704",
                            Value = "40,3765"
                        },
                        new
                        {
                            ID = "R01200",
                            CharCode = "HKD",
                            Name = "Гонконгский доллар",
                            Nominal = "1",
                            NumCode = "344",
                            Value = "12,4561"
                        },
                        new
                        {
                            ID = "R01210",
                            CharCode = "GEL",
                            Name = "Грузинский лари",
                            Nominal = "1",
                            NumCode = "981",
                            Value = "36,1402"
                        },
                        new
                        {
                            ID = "R01215",
                            CharCode = "DKK",
                            Name = "Датская крона",
                            Nominal = "1",
                            NumCode = "208",
                            Value = "13,7790"
                        },
                        new
                        {
                            ID = "R01230",
                            CharCode = "AED",
                            Name = "Дирхам ОАЭ",
                            Nominal = "1",
                            NumCode = "784",
                            Value = "26,4926"
                        },
                        new
                        {
                            ID = "R01235",
                            CharCode = "USD",
                            Name = "Доллар США",
                            Nominal = "1",
                            NumCode = "840",
                            Value = "97,3074"
                        },
                        new
                        {
                            ID = "R01239",
                            CharCode = "EUR",
                            Name = "Евро",
                            Nominal = "1",
                            NumCode = "978",
                            Value = "102,6255"
                        },
                        new
                        {
                            ID = "R01240",
                            CharCode = "EGP",
                            Name = "Египетских фунтов",
                            Nominal = "10",
                            NumCode = "818",
                            Value = "31,4980"
                        },
                        new
                        {
                            ID = "R01270",
                            CharCode = "INR",
                            Name = "Индийских рупий",
                            Nominal = "10",
                            NumCode = "356",
                            Value = "11,6979"
                        },
                        new
                        {
                            ID = "R01280",
                            CharCode = "IDR",
                            Name = "Индонезийских рупий",
                            Nominal = "10000",
                            NumCode = "360",
                            Value = "61,8571"
                        },
                        new
                        {
                            ID = "R01335",
                            CharCode = "KZT",
                            Name = "Казахстанских тенге",
                            Nominal = "100",
                            NumCode = "398",
                            Value = "20,3576"
                        },
                        new
                        {
                            ID = "R01350",
                            CharCode = "CAD",
                            Name = "Канадский доллар",
                            Nominal = "1",
                            NumCode = "124",
                            Value = "71,1052"
                        },
                        new
                        {
                            ID = "R01355",
                            CharCode = "QAR",
                            Name = "Катарский риал",
                            Nominal = "1",
                            NumCode = "634",
                            Value = "26,7328"
                        },
                        new
                        {
                            ID = "R01370",
                            CharCode = "KGS",
                            Name = "Киргизских сомов",
                            Nominal = "10",
                            NumCode = "417",
                            Value = "10,8942"
                        },
                        new
                        {
                            ID = "R01375",
                            CharCode = "CNY",
                            Name = "Китайский юань",
                            Nominal = "1",
                            NumCode = "156",
                            Value = "13,2533"
                        },
                        new
                        {
                            ID = "R01500",
                            CharCode = "MDL",
                            Name = "Молдавских леев",
                            Nominal = "10",
                            NumCode = "498",
                            Value = "53,6005"
                        },
                        new
                        {
                            ID = "R01530",
                            CharCode = "NZD",
                            Name = "Новозеландский доллар",
                            Nominal = "1",
                            NumCode = "554",
                            Value = "56,9054"
                        },
                        new
                        {
                            ID = "R01535",
                            CharCode = "NOK",
                            Name = "Норвежских крон",
                            Nominal = "10",
                            NumCode = "578",
                            Value = "88,0363"
                        },
                        new
                        {
                            ID = "R01565",
                            CharCode = "PLN",
                            Name = "Польский злотый",
                            Nominal = "1",
                            NumCode = "985",
                            Value = "23,1112"
                        },
                        new
                        {
                            ID = "R01585F",
                            CharCode = "RON",
                            Name = "Румынский лей",
                            Nominal = "1",
                            NumCode = "946",
                            Value = "20,6260"
                        },
                        new
                        {
                            ID = "R01589",
                            CharCode = "XDR",
                            Name = "СДР (специальные права заимствования)",
                            Nominal = "1",
                            NumCode = "960",
                            Value = "127,5846"
                        },
                        new
                        {
                            ID = "R01625",
                            CharCode = "SGD",
                            Name = "Сингапурский доллар",
                            Nominal = "1",
                            NumCode = "702",
                            Value = "70,8308"
                        },
                        new
                        {
                            ID = "R01670",
                            CharCode = "TJS",
                            Name = "Таджикских сомони",
                            Nominal = "10",
                            NumCode = "972",
                            Value = "88,7898"
                        },
                        new
                        {
                            ID = "R01675",
                            CharCode = "THB",
                            Name = "Таиландских батов",
                            Nominal = "10",
                            NumCode = "764",
                            Value = "26,7394"
                        },
                        new
                        {
                            ID = "R01700J",
                            CharCode = "TRY",
                            Name = "Турецких лир",
                            Nominal = "10",
                            NumCode = "949",
                            Value = "34,7637"
                        },
                        new
                        {
                            ID = "R01710A",
                            CharCode = "TMT",
                            Name = "Новый туркменский манат",
                            Nominal = "1",
                            NumCode = "934",
                            Value = "27,8021"
                        },
                        new
                        {
                            ID = "R01717",
                            CharCode = "UZS",
                            Name = "Узбекских сумов",
                            Nominal = "10000",
                            NumCode = "860",
                            Value = "79,7149"
                        },
                        new
                        {
                            ID = "R01720",
                            CharCode = "UAH",
                            Name = "Украинских гривен",
                            Nominal = "10",
                            NumCode = "980",
                            Value = "26,6031"
                        },
                        new
                        {
                            ID = "R01760",
                            CharCode = "CZK",
                            Name = "Чешских крон",
                            Nominal = "10",
                            NumCode = "203",
                            Value = "41,6663"
                        },
                        new
                        {
                            ID = "R01770",
                            CharCode = "SEK",
                            Name = "Шведских крон",
                            Nominal = "10",
                            NumCode = "752",
                            Value = "88,1112"
                        },
                        new
                        {
                            ID = "R01775",
                            CharCode = "CHF",
                            Name = "Швейцарский франк",
                            Nominal = "1",
                            NumCode = "756",
                            Value = "108,1915"
                        },
                        new
                        {
                            ID = "R01805F",
                            CharCode = "RSD",
                            Name = "Сербских динаров",
                            Nominal = "100",
                            NumCode = "941",
                            Value = "87,5118"
                        },
                        new
                        {
                            ID = "R01810",
                            CharCode = "ZAR",
                            Name = "Южноафриканских рэндов",
                            Nominal = "10",
                            NumCode = "710",
                            Value = "50,9290"
                        },
                        new
                        {
                            ID = "R01815",
                            CharCode = "KRW",
                            Name = "Вон Республики Корея",
                            Nominal = "1000",
                            NumCode = "410",
                            Value = "71,6866"
                        },
                        new
                        {
                            ID = "R01820",
                            CharCode = "JPY",
                            Name = "Японских иен",
                            Nominal = "100",
                            NumCode = "392",
                            Value = "64,9756"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
